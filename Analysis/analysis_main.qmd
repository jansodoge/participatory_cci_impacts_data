---
title: "Model Analysis"
format: html
editor: visual
execute:
  echo: false
---

This document contains all code required to replicate the analysis 


```{r}
library(readxl)
library(tidyverse)
library(gt)
library(ggraph)
library(FactoMineR)
library(factoextra)
library(igraph)
library(ggwordcloud)
library(pheatmap)
```

```{r, message=FALSE, warning=FALSE}

#read sheet with all assessed variables. Let's do some descriptives here
variables <- read_excel("../Documentation/variable_homogenisation.xlsx", 
                        sheet = "variables") %>% 
  tidyr::drop_na(`Homogenisation (step 2)`) %>%  
  dplyr::rename(map_id = `Map ID`,
                variable_group = `Variable group`,
                homogeneised_var = `Homogenisation (step 2)`,
                variable_id = `# Var`)




```

Reading individual models

```{r, warning=FALSE, message=FALSE}
read_model <- function(path_model){
model_5_updated_matrix <- read_csv(paste0("../HomogenisedModels/matrices/", 
                                          path_model)) %>% 
  as.matrix(.)
rownames(model_5_updated_matrix) <- model_5_updated_matrix[,1]
model_5_updated_matrix <- model_5_updated_matrix[, -1]
model_5_updated_matrix <- ifelse(is.na(model_5_updated_matrix), 0, 1)
return(model_5_updated_matrix)
}


model_1 <- read_model("model_1_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_2 <- read_model("model_2_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_3 <- read_model("model_3_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_5 <- read_model("model_5_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")

model_7 <- read_model("model_7_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_8 <- read_model("model_8_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_9 <- read_model("model_9_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_10 <- read_model("model_10_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_12 <- read_model("model_12_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_14 <- read_model("model_14_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_15 <- read_model("model_15_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_16 <- read_model("model_15_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_17 <- read_model("model_17_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_18 <- read_model("model_18_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_19 <- read_model("model_19_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_20 <- read_model("model_20_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_21 <- read_model("model_21_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_22 <- read_model("model_22_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_23 <- read_model("model_23_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_24 <- read_model("model_24_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")
model_25 <- read_model("model_25_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
                                                                                            mode = "directed")

list_of_models <- list(model_1, model_2, model_3, model_5, model_7,
                       model_8, model_9, model_10, model_12, model_14,
                       model_15, model_16, model_17, model_18,
                       model_19, model_20, model_21, model_22,
                       model_23, model_24, model_25)

full_model <- igraph::graph.union(list_of_models)

```





```{r}
#descriptives for the individual models
# Calculate the number of elements (vertices) in each network
number_of_elements <- lapply(list_of_models, function(network) length(V(network)))

# Calculate the median of these values
median_elements <- sd(unlist(number_of_elements))

median_elements
```



```{r, warning=FALSE, message=FALSE}

individual_model_vars <- variables %>% 
  dplyr::group_split(map_id)

nrows <- sapply(individual_model_vars, nrow)  
individual_model_vars <- individual_model_vars[order(-nrows)]  
new_items_count <- numeric(length(individual_model_vars))

for (i in seq_along(individual_model_vars)) {
  current_names <- unique(individual_model_vars[[i]]$homogeneised_var)
  previous_names <- bind_rows(individual_model_vars[1:(i-1)]) %>% 
    pull(homogeneised_var)
  new_items_count[i] <- length(setdiff(current_names, previous_names))
}

datafrane_figure <- variables %>% 
  group_by(map_id) %>% 
  count() %>% 
  arrange(desc(n)) %>% 
  dplyr::select(map_id, n) %>% 
  dplyr::bind_cols(as_tibble(new_items_count))
datafrane_figure$value[1] <- NA

figure_saturation <- datafrane_figure %>% 
  drop_na(map_id) %>% 
  ggplot(aes(x = reorder(map_id, -n), y = n))+
  geom_bar(stat = "identity", fill = NA,color = "black",
           width = .7)+
  geom_point(aes(x = reorder(map_id, -n), y = value, group = 1), 
            color = "red", inherit.aes = FALSE, size = 2)+
  geom_line(aes(x = reorder(map_id, -n), y = value, group = 1), 
            color = "red", inherit.aes = FALSE,
            size = 1)+
            theme_minimal()+
            theme(panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(),
              panel.background = element_rect(color = "black"))+
  labs(x = "Interview ID", y = "Number of variables")


ggsave("figures/saturation_curve.svg", plot = figure_saturation, device = "svg",
       width = 15, height = 10, units = "cm")

```

```{r}
full_model_edges <- V(full_model)$name %>% 
  as_tibble() %>% 
  dplyr::rename(variable_full_model = value) %>% 
  dplyr::left_join(variables %>% distinct(homogeneised_var, .keep_all = TRUE),
                   by = c("variable_full_model" = "homogeneised_var")) %>% 
  dplyr::select(variable_full_model, variable_group)

V(full_model)$system <- full_model_edges$variable_group

V(full_model)$coreness <- igraph::graph.coreness(full_model)

coreness <- ggraph(full_model) +
    geom_edge_link2(arrow = arrow(length = unit(2, 'mm')))+ 
    geom_node_point(aes(color = system, size = coreness+1))+
  ggsci::scale_color_npg()+
  theme_void()+
  labs(size = "Coreness", color = "Sector")+
  theme(legend.position = "bottom")



ggsave("figures/network_coreness_viz.svg", plot = coreness, device = "svg",
       width = 17, height = 8, units = "cm")


```

```{r}
full_model_edges <- V(full_model)$name %>% 
  as_tibble() %>% 
  dplyr::rename(variable_full_model = value) %>% 
  dplyr::left_join(variables %>% distinct(homogeneised_var, .keep_all = TRUE),
                   by = c("variable_full_model" = "homogeneised_var")) %>% 
  dplyr::select(variable_full_model, variable_group)

V(full_model)$system <- full_model_edges$variable_group


edgelist_macro_model <- igraph::as_edgelist(full_model) %>% 
  as_tibble() %>% 
  dplyr::rename(from = V1,
                to = V2) %>% 
  dplyr::left_join(variables %>% distinct(homogeneised_var, .keep_all = TRUE) %>% dplyr::select(variable_group,
                                                                                                homogeneised_var), 
                   by = c("from" = "homogeneised_var")) %>% 
  dplyr::rename(variable_group_from = variable_group) %>% 
   dplyr::left_join(variables %>% distinct(homogeneised_var, .keep_all = TRUE) %>% dplyr::select(variable_group,
                                                                                                homogeneised_var), 
                   by = c("to" = "homogeneised_var")) %>% 
  dplyr::rename(variable_group_to = variable_group) %>% 
  dplyr::select(variable_group_from, variable_group_to) %>% 
   group_by(variable_group_from, variable_group_to) %>% 
  count() %>% 
  drop_na(variable_group_to) %>% 
  drop_na(variable_group_from)

nodes <- unique(c(edgelist_macro_model$variable_group_from, 
                  edgelist_macro_model$variable_group_to))

adj_matrix <- matrix(0, nrow = length(nodes), ncol = length(nodes), dimnames = list(nodes, nodes))

for (i in 1:nrow(edgelist_macro_model)) {
  from <- edgelist_macro_model$variable_group_from[i]
  to <- edgelist_macro_model$variable_group_to[i]
  weight <- edgelist_macro_model$n[i]
  
  adj_matrix[from, to] <- weight
}

macro_group_model <- igraph::graph_from_adjacency_matrix(adj_matrix,
                                                         weighted = TRUE)


number_of_vars_per_group <- purrr::map_dfr(list_of_models, function(x){
  V(x)$name %>% as_tibble(.)
}) %>% 
  dplyr::left_join(variables %>% distinct(homogeneised_var, .keep_all = TRUE),
                   by = c("value" = "homogeneised_var")) %>% 
  dplyr::select(value, variable_group) %>% 
  drop_na(variable_group) %>% 
  group_by(variable_group) %>% 
  count() %>% 
  ungroup()
  
number_of_vars_per_group <- V(macro_group_model)$name %>% 
  as_tibble() %>% 
  dplyr::left_join(number_of_vars_per_group, by = c("value" = "variable_group")) %>% 
  pull(n)

V(macro_group_model)$size  <- number_of_vars_per_group


l <- layout_in_circle(simplify(macro_group_model))
plot(simplify(macro_group_model),
     edge.curved=.2,
      layout=l,
     edge.width=E(macro_group_model)$weight/4 +1,
     vertex.size = V(macro_group_model)$size/2,
     edge.arrow.size=.8,
     vertex.label.cex = 1,
     vertex.frame.color="black",
     edge.color="black", vertex.color="black",
     vertex.label.color = "black")
```

## Analyzing individual variables

```{r, warning=FALSE, message=FALSE}


calculate_centralities <- function(graph, id){


indeg <- igraph::centralization.degree(graph, mode = "in")$res
outdeg <- igraph::centralization.degree(graph, mode = "out")$res
total_deg <- igraph::centralization.degree(graph, mode = "all")$res
betweeness_cen <- igraph::betweenness(graph)


data.frame(indegree_centrality = indeg, 
           variable = V(graph)$name,
           total_degree  = total_deg,
           betweeness = betweeness_cen,
           outdegree_centrality   = outdeg,
           model_id = rep(id, length(indeg)))

}


centralities <- dplyr::bind_rows(calculate_centralities(list_of_models[[1]], "1"),
                                 calculate_centralities(list_of_models[[2]], "2"),
                                 calculate_centralities(list_of_models[[3]], "3"),
                                 calculate_centralities(list_of_models[[4]], "5"),
                                 calculate_centralities(list_of_models[[5]], "7"),
                                 calculate_centralities(list_of_models[[6]], "8"),
                                 calculate_centralities(list_of_models[[7]], "9"),
                                 calculate_centralities(list_of_models[[8]], "10"),
                                 calculate_centralities(list_of_models[[9]], "12"),
                                 calculate_centralities(list_of_models[[10]], "14"),
                                 calculate_centralities(list_of_models[[11]], "15"),
                                 calculate_centralities(list_of_models[[12]], "16"),
                                 calculate_centralities(list_of_models[[13]], "17"),
                                 calculate_centralities(list_of_models[[14]], "18"),
                                 calculate_centralities(list_of_models[[15]], "19"),
                                 calculate_centralities(list_of_models[[16]], "20"),
                                 calculate_centralities(list_of_models[[17]], "21"),
                                 calculate_centralities(list_of_models[[18]], "22"),
                                 calculate_centralities(list_of_models[[19]], "23"),
                                 calculate_centralities(list_of_models[[20]], "24"),
                                 calculate_centralities(list_of_models[[21]], "25"))


```





```{r}

betweness_individual_models <-  centralities %>% 
    as_tibble() %>% 
    group_by(model_id) %>% 
    mutate(indegree_centrality = scales::rescale(indegree_centrality),
           outdegree_centrality  = scales::rescale(outdegree_centrality),
           betweeness = scales::rescale(betweeness),
           total_deg = scales::rescale(total_degree)) %>% 
    ungroup() %>% 
    group_by(variable) %>% 
    summarise(mean_betweeness = mean(betweeness, na.rm = TRUE),
              mean_indeg = mean(indegree_centrality, na.rm = TRUE),
              mean_outdeg = mean(outdegree_centrality, na.rm = TRUE),
              mean_deg = mean(total_deg, na.rm = TRUE),
              
              frequency = n()) %>% 
   dplyr::ungroup()


  
betweness_full_model <- data.frame(betweeness_centrality = igraph::betweenness(full_model),
                                      variables = V(full_model)$name,
           degree_centrality = igraph::degree(full_model)) %>% 
  mutate(betweeness_centrality_rank = rank(betweeness_centrality))



plot_a <- betweness_individual_models %>% 
  ggplot(aes(x = mean_indeg, y = mean_outdeg, label = variable, 
             size = frequency))+
   geom_point(alpha = .5)+
  theme_minimal()+
  theme(panel.background = element_rect(color = "black"),
        panel.grid.major = element_blank(),
        legend.position = "none",
        legend.box.background = element_rect(color = "black"),
        panel.grid.minor = element_blank())+
  ggrepel::geom_text_repel(size = 2)+
  labs(x = "Mean of in-degree centrality - individual models", 
       y = "Mean of out-degree centrality - individual models",
       size = "Frequency")
   



# Adding linear regression line and R-squared value
linear_model <- lm(mean_deg ~ mean_betweeness, data = betweness_individual_models)  # Replace 'df' with your data frame name


plot_b <- betweness_individual_models %>% 
  ggplot(aes(x = mean_deg, y = mean_betweeness, label = variable, 
             size = frequency))+
   geom_point(alpha = .5)+
  theme_minimal()+
  theme(panel.background = element_rect(color = "black"),
        panel.grid.major = element_blank(),
        legend.position = "right",
        
        legend.box.background = element_rect(color = "black"),
        panel.grid.minor = element_blank())+
  ggrepel::geom_text_repel(size = 2)+
  labs(x = "Mean of degree centrality - individual models", 
       y = "Mean of betweenness centrality - individual models",
       size = "Frequency")+
   geom_abline(intercept = coef(linear_model)[1], slope = coef(linear_model)[2], 
              linetype = "dashed", color = "red")+
  annotate("text", x = 0.8, y = 0.52, label = paste("R^2 =", round(summary(linear_model)$r.squared, 3)),
           size = 3, color = "red")

library(patchwork)
plot_a + plot_b
  


```

```{r}
centralities %>%
    as_tibble() %>%
    group_by(model_id) %>%
    mutate(indegree_centrality = scales::rescale(indegree_centrality),
           outdegree_centrality = scales::rescale(outdegree_centrality),
           betweeness = scales::rescale(betweeness),
           total_deg = scales::rescale(total_degree)) %>%
    ungroup() %>%
    # Filter out groups where all betweeness values are 0
    group_by(variable) %>% 
  count()

centralities %>%
    as_tibble() %>%
    group_by(model_id) %>%
    mutate(indegree_centrality = scales::rescale(indegree_centrality),
           outdegree_centrality = scales::rescale(outdegree_centrality),
           betweeness = scales::rescale(betweeness),
           total_deg = scales::rescale(total_degree)) %>%
    ungroup() %>%
    # Filter out groups where all betweeness values are 0
    group_by(variable) %>%
    filter(any(betweeness != 0)) %>%
    ungroup() %>%
    mutate(variable = reorder(variable, betweeness, FUN = median)) %>% # Reorder by median
    ggplot(aes(x = variable, y = betweeness)) +
    geom_boxplot() +
    labs(y = "Betweenness centrality",
         x = "") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.0, hjust=0))





centralities %>%
    as_tibble() %>%
    group_by(model_id) %>%
    mutate(indegree_centrality = scales::rescale(indegree_centrality),
           outdegree_centrality = scales::rescale(outdegree_centrality),
           betweeness = scales::rescale(betweeness),
           total_deg = scales::rescale(total_degree)) %>%
    ungroup() %>%
    # Filter out groups where all betweeness values are 0
    group_by(variable) %>%
    filter(any(betweeness != 0)) %>%
    ungroup() %>%
    mutate(variable = reorder(variable, betweeness, FUN = median)) %>% # Reorder by median
    ggplot(aes(x = variable, y = betweeness)) +
    geom_boxplot() +
    labs(y = "Betweenness centrality",
         x = "") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.0, hjust=0))







```


```{r, fig.height=6, fig.width=4}
centralities %>%
    as_tibble() %>%
    group_by(model_id) %>%
    mutate(indegree_centrality = scales::rescale(indegree_centrality),
           outdegree_centrality = scales::rescale(outdegree_centrality),
           betweeness = scales::rescale(betweeness),
           total_deg = scales::rescale(total_degree)) %>%
    ungroup() %>%
  dplyr::select(model_id, variable, total_deg, betweeness, outdegree_centrality, indegree_centrality) %>% 
      mutate(variable = reorder(variable, betweeness, FUN = median)) %>% 
    tidyr::pivot_longer(!c(model_id, variable), names_to = "metrics", 
                        values_to = "centrality") %>% 
    ggplot(aes(x = variable, y = centrality, color = metrics)) +
    geom_boxplot() +
    theme(axis.text.x = element_text(vjust = 0.5, hjust=1, size = 4),
          legend.position = "bottom")+
  coord_flip()
```



```{r}

betweness_individual_models <-  centralities %>% 
    as_tibble() %>% 
    group_by(model_id) %>% 
    mutate(betweeness = scales::rescale(betweeness)) %>% 
    ungroup() %>% 
    group_by(variable) %>% 
    summarise(mean_betweeness = mean(betweeness, na.rm = TRUE),
              frequency = n()) %>% 
   ungroup() %>% 
   mutate(mean_betweeness_rank = rank(mean_betweeness))
  
  
betweness_full_model <- data.frame(betweeness_centrality = igraph::betweenness(full_model),
                                      variables = V(full_model)$name,
           degree_centrality = igraph::degree(full_model)) %>% 
  mutate(betweeness_centrality_rank = rank(betweeness_centrality))


plot <- betweness_full_model %>% 
  dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>% 
  dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank, 
                betweeness_centrality, mean_betweeness, frequency) %>% 
  ggplot(aes(x = betweeness_centrality, y = mean_betweeness, label = variables,
             size  = frequency))+
   geom_point(alpha = .5)+
  theme_minimal()+
  theme(panel.background = element_rect(color = "black"),
        panel.grid.major = element_blank(),
        legend.position = c(0.92, 0.85),
        legend.box.background = element_rect(color = "black"),
        panel.grid.minor = element_blank())+
  ggrepel::geom_text_repel(size = 2)+
  labs(x = "Full model - betweenness centrality", y = "Mean of normed betweenness - individual models",
       size = "Frequency")


df <- betweness_full_model %>% 
  dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>% 
  dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank, 
                betweeness_centrality, mean_betweeness, frequency)
# Adding linear regression line and R-squared value
linear_model <- lm(mean_betweeness ~ betweeness_centrality, data = df)  # Replace 'df' with your data frame name


plot_with_line <- plot + 
  geom_abline(intercept = coef(linear_model)[1], slope = coef(linear_model)[2], 
              linetype = "dashed", color = "red")+
  annotate("text", x = 235, y = 0.52, label = paste("R^2 =", round(summary(linear_model)$r.squared, 3)),
           size = 3, color = "red")

  

ggsave("figures/scatter_betweness.svg", plot = plot_with_line, device = "svg",
       width = 15, height = 10, units = "cm")



betweness_full_model %>% 
  dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>% 
  dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank, 
                betweeness_centrality, mean_betweeness, frequency) %>% 
  ggplot(aes(x = betweeness_centrality))+
  geom_histogram(bins = 15, fill = "white", color = "black")+
  theme_void()+
  theme(axis.text.y = element_text(),
        axis.title.y = element_text())+
  labs(y = "N")



```

## System-level analysis

```{r}
calculate_network_statistics <- function(graph_list) {
  density <- numeric(length(graph_list))
  avg_path_length <- numeric(length(graph_list))
  max_path_length <- numeric(length(graph_list))
  reciprocity <- numeric(length(graph_list))
  transitivity <- numeric(length(graph_list))
  diameter <- numeric(length(graph_list))
  centralisation <- numeric(length(graph_list))
  
  for (i in 1:length(graph_list)) {
    graph <- graph_list[[i]]
    
    density[i] <- graph.density(graph)
    avg_path_length[i] <- mean(distances(graph))
    max_path_length[i] <- max(distances(graph))
    reciprocity[i] <- reciprocity(graph)
    transitivity[i] <- transitivity(graph)
    diameter[i] <- igraph::diameter(graph)
    centralisation[i] <- igraph::centralization.degree(graph)$centralization
  }
  
  result <- data.frame(
    "Average Path Length" = avg_path_length,
    "Transitivity" = transitivity,
    "Diameter" = diameter,
    "Centralisation" = centralisation
  )
  
  return(result)
}


graph_list <- list_of_models
result <- calculate_network_statistics(graph_list) 
full_model_results <- calculate_network_statistics(list(full_model)) 


network_level_statistics <- result %>% 
  rowid_to_column(var = "row_id") %>% 
  tidyr::pivot_longer(!row_id, values_to = "coefficient", names_to = "metric") %>% 
  mutate(model_type = "Individual") %>% 
  dplyr::bind_rows(data = full_model_results %>% 
               rowid_to_column(var = "row_id") %>% 
  tidyr::pivot_longer(!row_id, values_to = "coefficient", names_to = "metric") %>% 
    mutate(model_type = "Aggregated")) %>% 
  ggplot(aes(y = coefficient, x = metric, color = model_type))+
  geom_boxplot(color = "gray60", outlier.alpha = 0, width = .2) +
      geom_jitter(size = 2, width = 0.1, alpha = .5) +

scale_color_manual(values = c("red", "gray60"))+
    theme_minimal()+
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "bottom",
        axis.title = element_blank(),
        panel.border = element_rect(color = "black", fill = NA),
        axis.text.x = element_blank())+
  facet_wrap(~metric, scales = "free", nrow = 1)+
  labs(color = "Models")
  

network_level_statistics


ggsave("figures/network_level_statistics.svg", plot = network_level_statistics, device = "svg",
       width = 15, height = 10, units = "cm")


```


```{r}
graph_list <- list_of_models


find_feedback_loops_count <-  function(graph_model){
Cycles = NULL
for(v1 in V(graph_model)) {
    for(v2 in neighbors(graph_model, v1, mode="out")) {
        Cycles = c(Cycles,
            lapply(all_simple_paths(graph_model, v2,v1, mode="out"), function(p) c(v1,p)))
    }
}
return(length(Cycles))  
}


sample_merge_count_loops <- function(graph_list, number_models) {
  sampled_graphs <- sample(graph_list, size = number_models, replace = FALSE)
  merged_graph <- igraph::graph.union(sampled_graphs, byname = TRUE)
  feedback_loops <- find_feedback_loops_count(merged_graph)
    return(feedback_loops)
}


emerging_loops_2 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 2)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(2))

emerging_loops_3 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 3)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(3))

emerging_loops_4 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 4)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(4))

emerging_loops_5 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 5)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(5))

emerging_loops_6 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 6)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(6))

emerging_loops_7 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 7)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(7))

emerging_loops_8 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 8)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(8))

emerging_loops_9 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 9)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(9))

emerging_loops_10 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 10)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(10))

emerging_loops_11 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 11)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(11))

emerging_loops_12 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 12)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(12))

emerging_loops_13 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 13)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(13))

emerging_loops_14 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 14)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(14))

emerging_loops_15 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 15)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(15))

emerging_loops_16 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 16)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(16))

emerging_loops_17 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 17)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(17))

emerging_loops_18 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 18)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(18))

emerging_loops_19 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 19)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(19))

emerging_loops_20 <- map_dbl(1:500, ~ sample_merge_count_loops(graph_list,
                                                              number_models = 20)) %>% 
  as_tibble() %>% 
  dplyr::rename(loops = value) %>% 
  dplyr::mutate(number_models= as_factor(20))







sampling_feedback_loops_plot <- dplyr::bind_rows(emerging_loops_2, emerging_loops_3, emerging_loops_4, emerging_loops_5,
                 emerging_loops_6, emerging_loops_7, emerging_loops_8,
                 emerging_loops_9, emerging_loops_10, emerging_loops_11, 
                 emerging_loops_12, emerging_loops_13, emerging_loops_14,
                 emerging_loops_15, emerging_loops_16,  emerging_loops_17,
                  emerging_loops_18,  emerging_loops_19,  emerging_loops_20) %>% 
  ggplot(aes(y = loops, x = number_models))+
  geom_boxplot()+
  labs(x = "Number of aggregated models",
       y = "Number of feedback loops")+
  theme_minimal()+
  theme(panel.border = element_rect(color = "black", fill = NA))+
  scale_x_discrete(breaks = c(2,5,10,15,20))+
  scale_y_continuous(limits = c(0, NA))





ggsave("figures/sampled_feedback_loops.svg", plot = sampling_feedback_loops_plot, device = "svg",
       width = 15, height = 10, units = "cm")


```

```{r}
graph_list <- list_of_models




find_feedback_loops_count <-  function(graph_model){
Cycles = NULL
for(v1 in V(graph_model)) {
    for(v2 in neighbors(graph_model, v1, mode="out")) {
        Cycles = c(Cycles,
            lapply(all_simple_paths(graph_model, v2,v1, mode="out"), function(p) c(v1,p)))
    }
}
return(length(Cycles))  
}

for(model in graph_list){
  print(find_feedback_loops_count(model))
}

```

```{r}
Cycles = NULL
for(v1 in V(full_model)) {
    for(v2 in neighbors(full_model, v1, mode="out")) {
        Cycles = c(Cycles,
            lapply(all_simple_paths(full_model, v2,v1, mode="out"), function(p) c(v1,p)))
    }
}

loops <- purrr::map_dfr(Cycles, function(x){
  
  t(names(x)) %>% as_tibble()
}) %>% 
  dplyr::select(-V1)


loops %>% 
  rowid_to_column(var = "sequence_id") %>% 
  write_csv(., "feedback_loops_full_model.csv")


```




# Model validation

Output for summary in research paper:

```{r, message=FALSE, warning=FALSE}
library(readxl)

baseline_model <- read_excel("../Documentation/Validation workshop/validation_workshop_model.xlsx",
                             sheet = "baseline_model") %>% 
  as.matrix(.)
rownames(baseline_model) <- baseline_model[,1]
baseline_model <- baseline_model[, -1]



read_group_models <- function(sheet_name){

group1_model <- read_excel("../Documentation/Validation workshop/validation_workshop_model.xlsx",
                           sheet = sheet_name) %>% 
  as.matrix(.)
rownames(group1_model) <- group1_model[,1]
group1_model <- group1_model[, -1]
return(group1_model)
}


group1 <- read_group_models("group_1")
group2 <- read_group_models("group_2")
group3 <- read_group_models("group_3")
group4 <- read_group_models("group_4")
group5 <- read_group_models("group_5")

#print results
group1_modified <- as.numeric(group5[1:39,1:39])
comparison1_count <- sum(baseline_model == 0 & group1_modified == 1)
comparison2_count <- sum(baseline_model == 1 & group1_modified == 0)
print(paste("Links not in baseline model that were added", comparison1_count, "\n",
            "Links removed from baseline model", comparison2_count
            ))

```

```{r, fig.height=10, fig.width=6}


# Create a data frame with stakeholders and their variables
stakeholders <- c("map1", "map2", "map3", "map5",
                  "map7", "map8", "map9",
                  "map10", "map12", "map14", "map15",
                  "map16", "map17", "map18", "map19",
                  "map20", "map21", "map22", "map23",
                  "map24", "map25")

map_1 <- variables %>% dplyr::filter(map_id == 1) %>% pull(homogeneised_var)
map_2 <- variables %>% dplyr::filter(map_id == 2) %>% pull(homogeneised_var)
map_3 <- variables %>% dplyr::filter(map_id == 3) %>% pull(homogeneised_var)
map_5 <- variables %>% dplyr::filter(map_id == 5) %>% pull(homogeneised_var)
map_7 <- variables %>% dplyr::filter(map_id == 7) %>% pull(homogeneised_var)
map_8 <- variables %>% dplyr::filter(map_id == 8) %>% pull(homogeneised_var)
map_9 <- variables %>% dplyr::filter(map_id == 9) %>% pull(homogeneised_var)
map_10 <- variables %>% dplyr::filter(map_id == 10) %>% pull(homogeneised_var)
map_12 <- variables %>% dplyr::filter(map_id == 12) %>% pull(homogeneised_var)
map_14 <- variables %>% dplyr::filter(map_id == 14) %>% pull(homogeneised_var)
map_15 <- variables %>% dplyr::filter(map_id == 15) %>% pull(homogeneised_var)
map_16 <- variables %>% dplyr::filter(map_id == 16) %>% pull(homogeneised_var)
map_17 <- variables %>% dplyr::filter(map_id == 17) %>% pull(homogeneised_var)
map_18 <- variables %>% dplyr::filter(map_id == 18) %>% pull(homogeneised_var)
map_19 <- variables %>% dplyr::filter(map_id == 19) %>% pull(homogeneised_var)
map_20 <- variables %>% dplyr::filter(map_id == 20) %>% pull(homogeneised_var)
map_21 <- variables %>% dplyr::filter(map_id == 21) %>% pull(homogeneised_var)
map_22 <- variables %>% dplyr::filter(map_id == 22) %>% pull(homogeneised_var)
map_23 <- variables %>% dplyr::filter(map_id == 23) %>% pull(homogeneised_var)
map_24 <- variables %>% dplyr::filter(map_id == 24) %>% pull(homogeneised_var)
map_25 <- variables %>% dplyr::filter(map_id == 25) %>% pull(homogeneised_var)

string_list <- lapply(list(map_1, map_2, map_3 , map_5,
                    map_7, map_8,
                    map_9, map_10, map_12,
                    map_14, map_15, map_16, 
                    map_17, map_18, map_19,
                    map_20, map_21, map_22, map_23,
                    map_24, map_25), unique)  

all_words <- unique(unlist(string_list))  # Get all unique words mentioned by stakeholders
word_matrix <- matrix(0, nrow = length(string_list), ncol = length(all_words))
colnames(word_matrix) <- all_words

for (i in 1:length(string_list)) {
  for (word in string_list[[i]]) {
    word_matrix[i, word] <- 1
  }
}


rownames(word_matrix) <-  c("Stakeholder 1", "Stakeholder 2", "Stakeholder 3", "Stakeholder 5",
                  "Stakeholder 7", "Stakeholder 8", "Stakeholder 9",
                  "Stakeholder 10", "Stakeholder 12", "Stakeholder 14", "Stakeholder 15",
                  "Stakeholder 16", "Stakeholder 17", "Stakeholder 18", "Stakeholder 19",
                  "Stakeholder 20", "Stakeholder 21", "Stakeholder 22", "Stakeholder 23",
                  "Stakeholder 24", "Stakeholder 25")

pheatmap(t(word_matrix),
         color = c("white", "black"), legend = FALSE, show_colnames = TRUE)


```







```{r}
node_id <- "Snow"  # Replace with your specific node identifier

# Extract the ego network
ego_net <- make_ego_graph(full_model, order = 1, nodes = node_id, mode = "all")[[1]]

# Plot the ego network
plot(ego_net, vertex.color = "skyblue", vertex.size = 10, 
     vertex.label.color = "black", edge.color = "grey")
```





