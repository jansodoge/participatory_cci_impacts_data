ggplot(aes(x = variable, y = betweeness)) +
geom_boxplot() +
labs(y = "Betweenness centrality",
x = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.0, hjust=0))
centralities %>%
as_tibble() %>%
group_by(model_id) %>%
mutate(indegree_centrality = scales::rescale(indegree_centrality),
outdegree_centrality = scales::rescale(outdegree_centrality),
betweeness = scales::rescale(betweeness),
total_deg = scales::rescale(total_degree)) %>%
ungroup() %>%
# Filter out groups where all betweeness values are 0
group_by(variable) %>%
filter(any(betweeness != 0)) %>%
ungroup() %>%
mutate(variable = reorder(variable, betweeness, FUN = median)) %>% # Reorder by median
ggplot(aes(x = variable, y = betweeness)) +
geom_boxplot() +
labs(y = "Betweenness centrality",
x = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.0, hjust=0))
read_model <- function(path_model){
model_5_updated_matrix <- read_csv(paste0("../HomogenisedModels/matrices/",
path_model)) %>%
as.matrix(.)
rownames(model_5_updated_matrix) <- model_5_updated_matrix[,1]
model_5_updated_matrix <- model_5_updated_matrix[, -1]
model_5_updated_matrix <- ifelse(is.na(model_5_updated_matrix), 0, 1)
return(model_5_updated_matrix)
}
model_1 <- read_model("model_1_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_2 <- read_model("model_2_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_3 <- read_model("model_3_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_5 <- read_model("model_5_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_7 <- read_model("model_7_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_8 <- read_model("model_8_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_9 <- read_model("model_9_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_10 <- read_model("model_10_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_12 <- read_model("model_12_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_14 <- read_model("model_14_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_15 <- read_model("model_15_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_16 <- read_model("model_15_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_17 <- read_model("model_17_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_18 <- read_model("model_18_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_19 <- read_model("model_19_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_20 <- read_model("model_20_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_21 <- read_model("model_21_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_22 <- read_model("model_22_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_23 <- read_model("model_23_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_24 <- read_model("model_24_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_25 <- read_model("model_25_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
list_of_models <- list(model_1, model_2, model_3, model_5, model_7,
model_8, model_9, model_10, model_12, model_14,
model_15, model_16, model_17, model_18,
model_19, model_20, model_21, model_22,
model_23, model_24, model_25)
full_model <- igraph::graph.union(list_of_models)
calculate_centralities <- function(graph, id){
indeg <- igraph::centralization.degree(graph, mode = "in")$res
outdeg <- igraph::centralization.degree(graph, mode = "out")$res
total_deg <- igraph::centralization.degree(graph, mode = "all")$res
betweeness_cen <- igraph::betweenness(graph)
data.frame(indegree_centrality = indeg,
variable = V(graph)$name,
total_degree  = total_deg,
betweeness = betweeness_cen,
outdegree_centrality   = outdeg,
model_id = rep(id, length(indeg)))
}
centralities <- dplyr::bind_rows(calculate_centralities(list_of_models[[1]], "1"),
calculate_centralities(list_of_models[[2]], "2"),
calculate_centralities(list_of_models[[3]], "3"),
calculate_centralities(list_of_models[[4]], "5"),
calculate_centralities(list_of_models[[5]], "7"),
calculate_centralities(list_of_models[[6]], "8"),
calculate_centralities(list_of_models[[7]], "9"),
calculate_centralities(list_of_models[[8]], "10"),
calculate_centralities(list_of_models[[9]], "12"),
calculate_centralities(list_of_models[[10]], "14"),
calculate_centralities(list_of_models[[11]], "15"),
calculate_centralities(list_of_models[[12]], "16"),
calculate_centralities(list_of_models[[13]], "17"),
calculate_centralities(list_of_models[[14]], "18"),
calculate_centralities(list_of_models[[15]], "19"),
calculate_centralities(list_of_models[[16]], "20"),
calculate_centralities(list_of_models[[17]], "21"),
calculate_centralities(list_of_models[[18]], "22"),
calculate_centralities(list_of_models[[19]], "23"),
calculate_centralities(list_of_models[[20]], "24"),
calculate_centralities(list_of_models[[21]], "25"))
centralities %>%
as_tibble() %>%
group_by(model_id) %>%
mutate(indegree_centrality = scales::rescale(indegree_centrality),
outdegree_centrality = scales::rescale(outdegree_centrality),
betweeness = scales::rescale(betweeness),
total_deg = scales::rescale(total_degree)) %>%
ungroup() %>%
# Filter out groups where all betweeness values are 0
group_by(variable) %>%
filter(any(betweeness != 0)) %>%
ungroup() %>%
mutate(variable = reorder(variable, betweeness, FUN = median)) %>% # Reorder by median
ggplot(aes(x = variable, y = betweeness)) +
geom_boxplot() +
labs(y = "Betweenness centrality",
x = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.0, hjust=0))
centralities %>%
as_tibble() %>%
group_by(model_id) %>%
mutate(indegree_centrality = scales::rescale(indegree_centrality),
outdegree_centrality = scales::rescale(outdegree_centrality),
betweeness = scales::rescale(betweeness),
total_deg = scales::rescale(total_degree)) %>%
ungroup() %>%
# Filter out groups where all betweeness values are 0
group_by(variable) %>%
filter(any(betweeness != 0)) %>%
ungroup() %>%
mutate(variable = reorder(variable, betweeness, FUN = median)) %>% # Reorder by median
ggplot(aes(x = variable, y = betweeness)) +
geom_boxplot() +
labs(y = "Betweenness centrality",
x = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.0, hjust=0))
boxplot(3,4)
boxplot(c(3,4))
load("~/impacts_dataset_export_validation.RData")
View(impacts_dataset)
node_id <- "Biodiversity loss"  # Replace with your specific node identifier
# Extract the ego network
ego_net <- make_ego_graph(full_model, order = 1, nodes = node_id, mode = "all")[[1]]
# Plot the ego network
plot(ego_net, vertex.color = "skyblue", vertex.size = 10,
vertex.label.color = "black", edge.color = "grey")
node_id <- "Biodiversity loss"  # Replace with your specific node identifier
# Extract the ego network
ego_net <- make_ego_graph(full_model, order = 1, nodes = node_id, mode = "all")[[1]]
# Plot the ego network
plot(ego_net, vertex.color = "skyblue", vertex.size = 10,
vertex.label.color = "black", edge.color = "grey")
ego_net <- make_ego_graph(full_model, order = 1, nodes = node_id, mode = "all")[[1]]
igraph::as_edgelist(ego_net)
View(igraph::as_edgelist(ego_net))
node_id <- "Snow"  # Replace with your specific node identifier
# Extract the ego network
ego_net <- make_ego_graph(full_model, order = 1, nodes = node_id, mode = "all")[[1]]
# Plot the ego network
plot(ego_net, vertex.color = "skyblue", vertex.size = 10,
vertex.label.color = "black", edge.color = "grey")
View(df)
View(df)
View(betweness_full_model)
betweness_individual_models <-  centralities %>%
as_tibble() %>%
group_by(model_id) %>%
mutate(betweeness = scales::rescale(betweeness)) %>%
ungroup() %>%
group_by(variable) %>%
summarise(mean_betweeness = mean(betweeness, na.rm = TRUE),
frequency = n()) %>%
ungroup() %>%
mutate(mean_betweeness_rank = rank(mean_betweeness))
betweness_full_model <- data.frame(betweeness_centrality = igraph::betweenness(full_model),
variables = V(full_model)$name,
degree_centrality = igraph::degree(full_model)) %>%
mutate(betweeness_centrality_rank = rank(betweeness_centrality))
plot <- betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality, y = mean_betweeness, label = variables,
size  = frequency))+
geom_point(alpha = .5)+
theme_minimal()+
theme(panel.background = element_rect(color = "black"),
panel.grid.major = element_blank(),
legend.position = c(0.92, 0.85),
legend.box.background = element_rect(color = "black"),
panel.grid.minor = element_blank())+
ggrepel::geom_text_repel(size = 2)+
labs(x = "Full model - betweenness centrality", y = "Mean of normed betweenness - individual models",
size = "Frequency")
df <- betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency)
# Adding linear regression line and R-squared value
linear_model <- lm(mean_betweeness ~ betweeness_centrality, data = df)  # Replace 'df' with your data frame name
plot_with_line <- plot +
geom_abline(intercept = coef(linear_model)[1], slope = coef(linear_model)[2],
linetype = "dashed", color = "red")+
annotate("text", x = 235, y = 0.52, label = paste("R^2 =", round(summary(linear_model)$r.squared, 3)),
size = 3, color = "red")
ggsave("figures/scatter_betweness.svg", plot = plot_with_line, device = "svg",
width = 15, height = 10, units = "cm")
View(betweness_full_model)
View(network_level_statistics)
calculate_network_statistics <- function(graph_list) {
density <- numeric(length(graph_list))
avg_path_length <- numeric(length(graph_list))
max_path_length <- numeric(length(graph_list))
reciprocity <- numeric(length(graph_list))
transitivity <- numeric(length(graph_list))
diameter <- numeric(length(graph_list))
centralisation <- numeric(length(graph_list))
for (i in 1:length(graph_list)) {
graph <- graph_list[[i]]
density[i] <- graph.density(graph)
avg_path_length[i] <- mean(distances(graph))
max_path_length[i] <- max(distances(graph))
reciprocity[i] <- reciprocity(graph)
transitivity[i] <- transitivity(graph)
diameter[i] <- igraph::diameter(graph)
centralisation[i] <- igraph::centralization.degree(graph)$centralization
}
result <- data.frame(
"Average Path Length" = avg_path_length,
"Transitivity" = transitivity,
"Diameter" = diameter,
"Centralisation" = centralisation
)
return(result)
}
graph_list <- list_of_models
result <- calculate_network_statistics(graph_list)
full_model_results <- calculate_network_statistics(list(full_model))
full_model_results
result
median(result$Centralisation)
sd(result$Centralisation)
median(result$Transitivity)
View(centralities)
View(centralities %>%
as_tibble() %>%
group_by(model_id) %>%
mutate(indegree_centrality = scales::rescale(indegree_centrality),
outdegree_centrality = scales::rescale(outdegree_centrality),
betweeness = scales::rescale(betweeness),
total_deg = scales::rescale(total_degree)) %>%
ungroup())
median(c(0.25,0,0.4,1,0.3,0.75))
sd(c(0.25,0,0.4,1,0.3,0.75))
betweness_individual_models <-  centralities %>%
as_tibble() %>%
group_by(model_id) %>%
mutate(betweeness = scales::rescale(betweeness)) %>%
ungroup() %>%
group_by(variable) %>%
summarise(mean_betweeness = mean(betweeness, na.rm = TRUE),
frequency = n()) %>%
ungroup() %>%
mutate(mean_betweeness_rank = rank(mean_betweeness))
betweness_full_model <- data.frame(betweeness_centrality = igraph::betweenness(full_model),
variables = V(full_model)$name,
degree_centrality = igraph::degree(full_model)) %>%
mutate(betweeness_centrality_rank = rank(betweeness_centrality))
plot <- betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality, y = mean_betweeness, label = variables,
size  = frequency))+
geom_point(alpha = .5)+
theme_minimal()+
theme(panel.background = element_rect(color = "black"),
panel.grid.major = element_blank(),
legend.position = c(0.92, 0.85),
legend.box.background = element_rect(color = "black"),
panel.grid.minor = element_blank())+
ggrepel::geom_text_repel(size = 2)+
labs(x = "Full model - betweenness centrality", y = "Mean of normed betweenness - individual models",
size = "Frequency")
df <- betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency)
# Adding linear regression line and R-squared value
linear_model <- lm(mean_betweeness ~ betweeness_centrality, data = df)  # Replace 'df' with your data frame name
plot_with_line <- plot +
geom_abline(intercept = coef(linear_model)[1], slope = coef(linear_model)[2],
linetype = "dashed", color = "red")+
annotate("text", x = 235, y = 0.52, label = paste("R^2 =", round(summary(linear_model)$r.squared, 3)),
size = 3, color = "red")
ggsave("figures/scatter_betweness.svg", plot = plot_with_line, device = "svg",
width = 15, height = 10, units = "cm")
plot_with_line
betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality))+
geom_histogram(bins = 30)
betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality))+
geom_histogram(bins = 20)
betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality))+
geom_histogram(bins = 20, fill = "black")+
theme_void()
betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality))+
geom_histogram(bins = 20, fill = "black")+
theme_void()+
theme(axis.text.y = element_text(),
axix.title.y = element_text())
betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality))+
geom_histogram(bins = 20, fill = "black")+
theme_void()+
theme(axis.text.y = element_text(),
axis.title.y = element_text())
betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality))+
geom_histogram(bins = 20, fill = "black")+
theme_void()+
theme(axis.text.y = element_text(),
axis.title.y = element_text())+
labs(y = "N")
betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality))+
geom_histogram(bins = 20, fill = "white", color = "black")+
theme_void()+
theme(axis.text.y = element_t
betweness_full_model %>%
betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality))+
geom_histogram(bins = 20, fill = "white", color = "black")+
theme_void()+
theme(axis.text.y = element_text(),
axis.title.y = element_text())+
labs(y = "N")
betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality))+
geom_histogram(bins = 15, fill = "white", color = "black")+
theme_void()+
theme(axis.text.y = element_text(),
axis.title.y = element_text())+
labs(y = "N")
betweness_full_model %>%
dplyr::left_join(betweness_individual_models, by = c("variables" = "variable")) %>%
dplyr::select(variables, betweeness_centrality_rank, mean_betweeness_rank,
betweeness_centrality, mean_betweeness, frequency) %>%
ggplot(aes(x = betweeness_centrality))+
geom_histogram(bins = 15, fill = "white", color = "black")+
theme_void()+
theme(axis.text.y = element_text(),
axis.title.y = element_text())+
labs(y = "N")
datafrane_figure <- variables %>%
group_by(map_id) %>%
count() %>%
arrange(desc(n)) %>%
dplyr::select(map_id, n) %>%
dplyr::bind_cols(as_tibble(new_items_count))
library(readxl)
library(tidyverse)
library(gt)
library(ggraph)
library(FactoMineR)
library(factoextra)
library(igraph)
library(ggwordcloud)
library(pheatmap)
#read sheet with all assessed variables. Let's do some descriptives here
variables <- read_excel("../Documentation/variable_homogenisation.xlsx",
sheet = "variables") %>%
tidyr::drop_na(`Homogenisation (step 2)`) %>%
dplyr::rename(map_id = `Map ID`,
variable_group = `Variable group`,
homogeneised_var = `Homogenisation (step 2)`,
variable_id = `# Var`)
read_model <- function(path_model){
model_5_updated_matrix <- read_csv(paste0("../HomogenisedModels/matrices/",
path_model)) %>%
as.matrix(.)
rownames(model_5_updated_matrix) <- model_5_updated_matrix[,1]
model_5_updated_matrix <- model_5_updated_matrix[, -1]
model_5_updated_matrix <- ifelse(is.na(model_5_updated_matrix), 0, 1)
return(model_5_updated_matrix)
}
model_1 <- read_model("model_1_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_2 <- read_model("model_2_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_3 <- read_model("model_3_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_5 <- read_model("model_5_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_7 <- read_model("model_7_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_8 <- read_model("model_8_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_9 <- read_model("model_9_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_10 <- read_model("model_10_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_12 <- read_model("model_12_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_14 <- read_model("model_14_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_15 <- read_model("model_15_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_16 <- read_model("model_15_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_17 <- read_model("model_17_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_18 <- read_model("model_18_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_19 <- read_model("model_19_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_20 <- read_model("model_20_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_21 <- read_model("model_21_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_22 <- read_model("model_22_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_23 <- read_model("model_23_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_24 <- read_model("model_24_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
model_25 <- read_model("model_25_homogenised.csv") %>% igraph::graph_from_adjacency_matrix(.,
mode = "directed")
list_of_models <- list(model_1, model_2, model_3, model_5, model_7,
model_8, model_9, model_10, model_12, model_14,
model_15, model_16, model_17, model_18,
model_19, model_20, model_21, model_22,
model_23, model_24, model_25)
full_model <- igraph::graph.union(list_of_models)
#descriptives for the individual models
# Calculate the number of elements (vertices) in each network
number_of_elements <- lapply(list_of_models, function(network) length(V(network)))
# Calculate the median of these values
median_elements <- sd(unlist(number_of_elements))
median_elements
individual_model_vars <- variables %>%
dplyr::group_split(map_id)
nrows <- sapply(individual_model_vars, nrow)
individual_model_vars <- individual_model_vars[order(-nrows)]
new_items_count <- numeric(length(individual_model_vars))
for (i in seq_along(individual_model_vars)) {
current_names <- unique(individual_model_vars[[i]]$homogeneised_var)
previous_names <- bind_rows(individual_model_vars[1:(i-1)]) %>%
pull(homogeneised_var)
new_items_count[i] <- length(setdiff(current_names, previous_names))
}
datafrane_figure <- variables %>%
group_by(map_id) %>%
count() %>%
arrange(desc(n)) %>%
dplyr::select(map_id, n) %>%
dplyr::bind_cols(as_tibble(new_items_count))
datafrane_figure$value[1] <- NA
View(datafrane_figure)
28+13+6
sum(datafrane_figure$value)+28
sum(datafrane_figure$value, na.rm  =T)+28
47(89)
47/89
2/89
