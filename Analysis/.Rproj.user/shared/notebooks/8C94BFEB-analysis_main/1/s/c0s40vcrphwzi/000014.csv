"0","full_model_edges <- V(full_model)$name %>% "
"0","  as_tibble() %>% "
"0","  dplyr::rename(variable_full_model = value) %>% "
"0","  dplyr::left_join(variables %>% distinct(homogeneised_var, .keep_all = TRUE),"
"0","                   by = c(""variable_full_model"" = ""homogeneised_var"")) %>% "
"0","  dplyr::select(variable_full_model, variable_group)"
"0",""
"0","V(full_model)$system <- full_model_edges$variable_group"
"0",""
"0",""
"0","edgelist_macro_model <- igraph::as_edgelist(full_model) %>% "
"0","  as_tibble() %>% "
"0","  dplyr::rename(from = V1,"
"0","                to = V2) %>% "
"0","  dplyr::left_join(variables %>% distinct(homogeneised_var, .keep_all = TRUE) %>% dplyr::select(variable_group,"
"0","                                                                                                homogeneised_var), "
"0","                   by = c(""from"" = ""homogeneised_var"")) %>% "
"0","  dplyr::rename(variable_group_from = variable_group) %>% "
"0","   dplyr::left_join(variables %>% distinct(homogeneised_var, .keep_all = TRUE) %>% dplyr::select(variable_group,"
"0","                                                                                                homogeneised_var), "
"0","                   by = c(""to"" = ""homogeneised_var"")) %>% "
"0","  dplyr::rename(variable_group_to = variable_group) %>% "
"0","  dplyr::select(variable_group_from, variable_group_to) %>% "
"0","   group_by(variable_group_from, variable_group_to) %>% "
"0","  count() %>% "
"0","  drop_na(variable_group_to) %>% "
"0","  drop_na(variable_group_from)"
"2","Warnung: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0.
Using compatibility `.name_repair`."
"0","nodes <- unique(c(edgelist_macro_model$variable_group_from, "
"0","                  edgelist_macro_model$variable_group_to))"
"0",""
"0","adj_matrix <- matrix(0, nrow = length(nodes), ncol = length(nodes), dimnames = list(nodes, nodes))"
"0",""
"0","for (i in 1:nrow(edgelist_macro_model)) {"
"0","  from <- edgelist_macro_model$variable_group_from[i]"
"0","  to <- edgelist_macro_model$variable_group_to[i]"
"0","  weight <- edgelist_macro_model$n[i]"
"0","  "
"0","  adj_matrix[from, to] <- weight"
"0","}"
"0",""
"0","macro_group_model <- igraph::graph_from_adjacency_matrix(adj_matrix,"
"0","                                                         weighted = TRUE)"
"0",""
"0",""
"0","number_of_vars_per_group <- purrr::map_dfr(list_of_models, function(x){"
"0","  V(x)$name %>% as_tibble(.)"
"0","}) %>% "
"0","  dplyr::left_join(variables %>% distinct(homogeneised_var, .keep_all = TRUE),"
"0","                   by = c(""value"" = ""homogeneised_var"")) %>% "
"0","  dplyr::select(value, variable_group) %>% "
"0","  drop_na(variable_group) %>% "
"0","  group_by(variable_group) %>% "
"0","  count() %>% "
"0","  ungroup()"
"0","  "
"0","number_of_vars_per_group <- V(macro_group_model)$name %>% "
"0","  as_tibble() %>% "
"0","  dplyr::left_join(number_of_vars_per_group, by = c(""value"" = ""variable_group"")) %>% "
"0","  pull(n)"
"0",""
"0","V(macro_group_model)$size  <- number_of_vars_per_group"
"0",""
"0",""
"0","l <- layout_in_circle(simplify(macro_group_model))"
"0","plot(simplify(macro_group_model),"
"0","     edge.curved=.2,"
"0","      layout=l,"
"0","     edge.width=E(macro_group_model)$weight/4 +1,"
"0","     vertex.size = V(macro_group_model)$size/2,"
"0","     edge.arrow.size=.8,"
"0","     vertex.label.cex = 1,"
"0","     vertex.frame.color=""black"","
"0","     edge.color=""black"", vertex.color=""black"","
"0","     vertex.label.color = ""black"")"
